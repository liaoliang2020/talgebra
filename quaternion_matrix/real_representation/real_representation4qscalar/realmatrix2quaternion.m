function quaternion_num = realmatrix2quaternion(real_number)
	assert(isreal(real_number) );	
	assert(isequal(size(real_number), [4 4]) );
	
	first_column = real_number(:, 1);

	assert(...
	norm(real_number(:, 2) - [-1 * first_column(2); ...    
						first_column(1); ...
						first_column(4); ...
						-1 * first_column(3) ] ...
		) < 1e-6 );  


	%----------------
	assert(...
	norm(real_number(:, 3) - [-1 * first_column(3); ...    
						-1 * first_column(4); ...
						first_column(1); ...
						first_column(2) ] ...
		) < 1e-6 );  


	%----------------
	assert(...
	norm(real_number(:, 4) - [-1 * first_column(4); ...    
						first_column(3); ...
						-1 * first_column(2); ...
						first_column(1) ] ...
		) < 1e-6 );  


	quaternion_num = quaternion(reshape(first_column, 1, []) );
	
end